#include <iostream>
#include <cmath>
#include <algorithm>
using namespace std;

const int N=5; double X[N][2]={{3,0}, {3,3}, {0,3}, {0,0},{1,2}}; double MAX=0; //N-колво точек на плоскости; Х[N]-точки; MAX-максимальный периметр

bool twins(double A[N+1][2]){ //чтобы убрать перестановки с одинаковыми элементами
  int U=0;
  for(int i=0;i<N+1;i++){
    for(int k=1;(k+i<N+1);k++){
        if((fabs(A[i][0]-A[i+k][0])<0.0001)&&(fabs(A[i][1]-A[i+k][1]))<0.0001) U+=1;
    }
  }
  if(U>1) return true;//потому что первый и последний элемент я сделал одинаковыми
  else return false;
}

bool cross(double a[2],double b[2],double c[2],double d[2]){ //пересечения
   double dx1=b[0]-a[0];
   double dy1=b[1]-a[1];
   double dx2=d[0]-c[0];
   double dy2=d[1]-c[1];

   double a1=-dy1;
   double b1=+dx1;
   double d1=-(a1*a[0]+b1*a[1]);

   double a2=-dy2;
   double b2=+dx2;
   double d2=-(a2*c[0]+b2*c[1]);

   double seg1_st=a2*a[0]+b2*a[1]+d2;
   double seg1_end=a2*b[0]+b2*b[1]+d2;
   double seg2_st=a1*c[0]+b1*c[1]+d1;
   double seg2_end=a1*d[0]+b1*d[1]+d1;

   if(((fabs(c[0]-a[0])*dy1-(c[1]-a[1])*dx1)<0.0001) && ((max(a[0],b[0])-c[0])>=0.0001) && ((c[0]-min(a[0],b[0]))>=0.0001) && ((max(a[1],b[1])-c[1])>=0.0001) && ((c[1]-min(a[1],b[1]))>=0.0001)) return true;
   if(((fabs(d[0]-a[0])*dy1-(d[1]-a[1])*dx1)<0.0001)  && ((max(a[0],b[0])-d[0])>=0.0001) && ((d[0]-min(a[0],b[0]))>=0.0001) && ((max(a[1],b[1])-d[1])>=0.0001) && ((d[1]-min(a[1],b[1]))>=0.0001)) return true;
   if(((fabs(a[0]-c[0])*dy2-(a[1]-c[1])*dx2)<0.0001)  && ((max(c[0],d[0])-a[0])>=0.0001) && ((a[0]-min(c[0],d[0]))>=0.0001) && ((max(c[1],d[1])-a[1])>=0.0001) && ((a[1]-min(c[1],d[1]))>=0.0001)) return true;
   if(((fabs(b[0]-c[0])*dy2-(b[1]-c[1])*dx2)<0.0001)  && ((max(c[0],d[0])-b[0])>=0.0001) && ((b[0]-min(c[0],d[0]))>=0.0001) && ((max(c[1],d[1])-b[1])>=0.0001) && ((b[1]-min(c[1],d[1]))>=0.0001)) return true;

   if(seg1_st*seg1_end>=0 || seg2_st*seg2_end>=0) return false;



   return true;
}

double Per(double A[N+1][2]){ //периметр
  double P=0;
  for(int i=0;i<N;i++)
    P+=sqrt(pow((A[i+1][0]-A[i][0]),2)+pow((A[i+1][1]-A[i][1]),2));
  return P;
}

void Backtracking(int k){
    static double A[N+1][2];
    if(k==0){
      A[0][0]=X[0][0];
      A[0][1]=X[0][1];
      Backtracking(k+1);
    }
    else if (k==N){
        A[N][0]=X[0][0];
        A[N][1]=X[0][1];
        int a=0;
        for (int i=0, j=1;(i<N+1 && j<N+1);i+=1, j+=1){
                for(int k=2;(k+i<N+1 && k+j<N+1);k+=1){
                    if((cross(A[i],A[j],A[i+k],A[j+k]))==1) a+=1;
                  }
                if(i==0) a-=1;
        }

        if(twins(A)==1) a+=1;

        if(a==0){
            if(MAX<Per(A)){
            	MAX=Per(A);
            	for(int i=0;i<N+1;i++)
            			cout << "(" << A[i][0] << ";" << A[i][1] << ")";
            	cout << endl;
            }
          }
      }
    else{
        for(int i=1;i<N;i++){
            A[k][0]=X[i][0];
            A[k][1]=X[i][1];
            Backtracking(k+1);
        }
    }


}

int main(){
  Backtracking(0);
  cout << endl << MAX;
  return 0;
}
