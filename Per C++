#include <iostream>
#include <math.h>
using namespace std;

const int N=4; int X[N][2]={{0,0}, {0,1}, {1,0}, {1,1}}; double MAX=0;

bool cross(int a[2],int b[2],int c[2],int d[2]){
    int x1=a[0], y1=a[1], x2=b[0], y2=b[1], x3=c[0], y3=c[1], x4=d[0], y4=d[1];
    int dx1=x2-x1;
    int dy1=y2-y1;
    int dx2=x4-x3;
    int dy2=y4-y3;
    int x=(dy1*dx2)-(dy2*dx1);

    if((x==0)or(dx2==0)){
        return false;
    }
    int y=(x3*y4)-(y3*x4);
    x=((((x1*y2)-(y1*x2))*dx2)-(y*dx1))/x;
    y=((dy2*x)-y)/dx2;

    return (((x1<=x and x2>=x) or (x2<=x and x1>=x)) and ((x3<=x and x4>=x) or (x4<=x and x3>=x)));
}

double Per(int A[N+1][2]){
  double P=0;
  for(int i=0;i<N;i++)
    P+=sqrt(pow((A[i+1][0]-A[i][0]),2)+pow((A[i+1][1]-A[i][1]),2));
  return P;
}

void Backtracking(int k){
    static int A[N+1][2];
    if(k==0){
      A[0][0]=X[0][0];
      A[0][1]=X[0][1];
      Backtracking(k+1);
    }
    else if (k==N){
        A[N][0]=X[0][0];
        A[N][1]=X[0][1];
        for(int i=0;i<N+1;i++)
            		for(int j=0;j<2;j++)
            			cout << A[i][j];
        cout << endl;
        int a=0;
        for(int i=0,j=1;i<N+1;j<N+1;i+=2;j+=2){
                for(int k=2;k<N+1;k+=2){
                    if((cross(A[i],A[j],A[i+k],A[j+k]))==1) a+=1;
                  }
        }
        cout << a << endl;
        if(a==0){
            if(MAX<Per(A)){
            	MAX=Per(A);
            	for(int i=0;i<N+1;i++)
            		for(int j=0;j<2;j++)
            			cout << A[i][j];
            			cout << endl;
            }
          }
      }
    else{
        for(int i=1;i<N;i++){
            A[k][0]=X[i][0];
            A[k][1]=X[i][1];
            Backtracking(k+1);
        }
    }


}

int main(){
  Backtracking(0);
  cout << MAX;
  return 0;
}
