#include <iostream>
#include <math.h>
using namespace std;

const int N=5; int X[N][2]={{3,0}, {1,1}, {0,3}, {0,0}}; double MAX=0;

bool twins(int A[N+1][2]){
  int U=0;
  for(int i=0;i<N+1;i++){
    for(int k=1;(k+i<N+1);k++){
        if((A[i][0]==A[i+k][0])and(A[i][1]==A[i+k][1])) U+=1;
    }
  }
  if(U>1) return true;
  else return false;
}

bool cross(int a[2],int b[2],int c[2],int d[2]){
   float dx1=b[0]-a[0];
   float dy1=b[1]-a[1];
   float dx2=d[0]-c[0];
   float dy2=d[1]-c[1];

   float a1=-dy1;
   float b1=+dx1;
   float d1=-(a1*a[0]+b1*a[1]);

   float a2=-dy2;
   float b2=+dx2;
   float d2=-(a2*c[0]+b2*c[1]);

   float seg1_st=a2*a[0]+b2*a[1]+d2;
   float seg1_end=a2*b[0]+b2*b[1]+d2;
   float seg2_st=a1*c[0]+b1*c[1]+d1;
   float seg2_end=a1*d[0]+b1*d[1]+d1;
   if(seg1_st*seg1_end>=0 || seg2_st*seg2_end>=0) return false;
   return true;
}

double Per(int A[N+1][2]){
  double P=0;
  for(int i=0;i<N;i++)
    P+=sqrt(pow((A[i+1][0]-A[i][0]),2)+pow((A[i+1][1]-A[i][1]),2));
  return P;
}

void Backtracking(int k){
    static int A[N+1][2];
    if(k==0){
      A[0][0]=X[0][0];
      A[0][1]=X[0][1];
      Backtracking(k+1);
    }
    else if (k==N){
        A[N][0]=X[0][0];
        A[N][1]=X[0][1];
        int a=0;
        for (int i=0, j=1;(i<N+1 && j<N+1);i+=1, j+=1){
                for(int k=2;(k+i<N+1 && k+j<N+1);k+=2){
                    if((cross(A[i],A[j],A[i+k],A[j+k]))==1) a+=1;
                  }
        }

        if(twins(A)==1) a+=1;

        if(a==0){
            if(MAX<Per(A)){
            	MAX=Per(A);
            	for(int i=0;i<N+1;i++)
            			cout << "(" << A[i][0] << ";" << A[i][1] << ")";
            	cout << endl;
            }
          }
      }
    else{
        for(int i=1;i<N;i++){
            A[k][0]=X[i][0];
            A[k][1]=X[i][1];
            Backtracking(k+1);
        }
    }


}

int main(){
  Backtracking(0);
  cout << endl << MAX;
  return 0;
}
